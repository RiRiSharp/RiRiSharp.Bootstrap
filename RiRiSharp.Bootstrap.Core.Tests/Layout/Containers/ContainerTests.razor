@using RiRiSharp.Bootstrap.Core.Layout.Containers
@inherits TestContext

@code {
    [Fact]
    public void DefaultWorks()
    {
        // Arrange
        var cut = Render(
            @<Container>
                <hr/>
            </Container>
        );

        cut.Find("div").MarkupMatches(
            @<div class="container" diff:ignoreChildren></div>
        );
    }

    [Theory]
    [InlineData(ContainerBreakpoint.Sm, "container-sm")]
    [InlineData(ContainerBreakpoint.Md, "container-md")]
    [InlineData(ContainerBreakpoint.Lg, "container-lg")]
    [InlineData(ContainerBreakpoint.Xl, "container-xl")]
    [InlineData(ContainerBreakpoint.Xxl, "container-xxl")]
    [InlineData(ContainerBreakpoint.Fluid, "container-fluid")]
    public void BreakpointsWork(ContainerBreakpoint breakpoint, string expectedClass)
    {
        var cut = Render(
            @<Container ContainerBreakpoint="breakpoint">
                <hr/>
            </Container>
        );

        cut.Find("div").MarkupMatches(
            @<div class="@(expectedClass)" diff:ignoreChildren></div>
        );
    }

    [Theory]
    [InlineData(null)]
    [InlineData("")]
    [InlineData("aclass")]
    [InlineData("aclass bclass")]
    [InlineData("aclass blass class")]
    public void PassingClassesWorks(string classes)
    {
        // Arrange
        var cut = Render(
            @<Container Classes="@(classes)">
                <hr/>
            </Container>
        );

        cut.Find("div").MarkupMatches(
            @<div class="container @(classes)" diff:ignoreChildren></div>
        );
    }

    [Theory]
    [InlineData("testAttributeValue")]
    public void ExtraAttributesWorks(string attributeValue)
    {
        var cut = Render(
            @<Container test-attribute="@(attributeValue)">
                <hr/>
            </Container>
        );

        cut.Find("div").MarkupMatches(
            @<div class="container" test-attribute="@(attributeValue)"
                  diff:ignoreChildren></div>
        );
    }
}