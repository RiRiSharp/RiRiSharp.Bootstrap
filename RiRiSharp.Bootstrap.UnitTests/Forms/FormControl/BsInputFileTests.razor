@using RiRiSharp.Bootstrap.Forms
@using RiRiSharp.Bootstrap.Forms.FormControl
@inherits BunitContext
@code {
    [Fact]
    public void DefaultWorks()
    {
        // Arrange


        // Act
        var cut = Render(@<BsInputFile/>);

        // Assert
        var expectedMarkupString = string.Format(HtmlFormat, "", "");
        cut.MarkupMatches(expectedMarkupString);
    }

    [Theory]
    [InlineData(null)]
    [InlineData("")]
    [InlineData("aclass")]
    [InlineData("aclass bclass")]
    [InlineData("aclass blass class")]
    public void PassingClassesWorks(string classes)
    {
        // Arrange


        // Act
        var cut = Render(@<BsInputFile Classes="@(classes)"/>);

        // Assert
        var expectedMarkupString = string.Format(HtmlFormat, classes, "");
        cut.MarkupMatches(expectedMarkupString);
    }

    [Theory]
    [InlineData(new[] { "attributeKey" }, new[] { "attributeValue" },
        """attributeKey="attributeValue" """)]
    [InlineData(new[] { "attributeKey1", "attributeKey2" }, new[] { "attributeValue1", "attributeValue2" },
        """attributeKey1="attributeValue1" attributeKey2="attributeValue2" """)]
    public void ExtraAttributesWorks(string[] attributeKeys, string[] attributeValues, string expected)
    {
        // Arrange


        var attributes = attributeKeys
            .Zip(attributeValues)
            .ToDictionary(t => t.First, object (t) => t.Second);

        // Act
        var cut = Render(@<BsInputFile AdditionalAttributes="attributes"/>);

        // Assert
        var expectedMarkupString = string.Format(HtmlFormat, "", expected);
        cut.MarkupMatches(expectedMarkupString);
    }

    [Theory]
    [InlineData(BsFormSize.Small, "form-control-sm")]
    [InlineData(BsFormSize.Regular, "")]
    [InlineData(BsFormSize.Large, "form-control-lg")]
    public void PassingParametersRendersIntoCorrectBsClass(BsFormSize formSize, string expectedClass)
    {
        // Arrange


        // Act
        var cut = Render(@<BsInputFile FormSize="formSize"/>);

        // Assert
        var expectedMarkupString = string.Format(HtmlFormat, expectedClass, "");
        cut.MarkupMatches(expectedMarkupString);
    }
}